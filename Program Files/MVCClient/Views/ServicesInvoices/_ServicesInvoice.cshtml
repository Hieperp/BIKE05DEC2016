@using MVCBase.Enums;
@using MVCClient.Configuration

@model MVCClient.ViewModels.SalesTasks.ServicesInvoiceViewModel

<div id="div-form">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div id="popupWindow"></div>

        <div class="div-main">

            <div class="div-left">
                @Html.Partial("~/Views/SalesInvoices/_SalesInvoiceSectionA.cshtml")
                @Html.Partial("~/Views/Helpers/Commons/_ReceptionistAutoComplete.cshtml")
                @Html.Partial("~/Views/SalesInvoices/_SalesInvoiceSectionC.cshtml")

                @Html.HiddenFor(model => model.QuotationID)
                @Html.HiddenFor(model => model.IsFinished)

                @*<div class="form-group1">
                        @Html.LabelFor(model => model.QuotationEntryDate, htmlAttributes: new { @class = "control-label-left" })
                        <div class="div-input">
                            @Html.Kendo().DateTimePickerFor(model => model.QuotationEntryDate).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.QuotationEntryDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group1">
                        @Html.LabelFor(model => model.QuotationReference, htmlAttributes: new { @class = "control-label-left" })
                        <div class="div-input">
                            @Html.Kendo().MaskedTextBoxFor(model => model.QuotationReference).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.QuotationReference, "", new { @class = "text-danger" })
                        </div>
                    </div>*@


                <div class="form-group1">
                    @Html.LabelFor(model => model.EstimatedCompletionDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.EstimatedCompletionDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.EstimatedCompletionDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.RespondedDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.RespondedDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.RespondedDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.CompletionDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.CompletionDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.CompletionDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.CurrentMeters, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().NumericTextBoxFor(model => model.CurrentMeters).Format("{0:n0}").Decimals(0).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.CurrentMeters, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.VehicleCleaning, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DropDownListFor(m => m.VehicleCleaning).BindTo(Model.VehicleCleaningDropDown).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.VehicleCleaning, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.IsMajorRepair, htmlAttributes: new { @style = "margin-top: 10px;" })
                    <div class="div-input">
                        @Html.CheckBoxFor(model => model.IsMajorRepair, new { @style = "margin-top: 12px; margin-right: 3px;" })
                        @Html.ValidationMessageFor(model => model.IsMajorRepair, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.FailingPartReturned, htmlAttributes: new { @style = "margin-top: 10px;" })
                    <div class="div-input">
                        @Html.CheckBoxFor(model => model.FailingPartReturned, new { @style = "margin-top: 12px; margin-right: 3px;" })
                        @Html.ValidationMessageFor(model => model.FailingPartReturned, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="div-right">
                <div class="contract-separator">
                    @Html.Partial("~/Views/SalesInvoices/_ContractibleInvoice.cshtml")

                    <div id="partsInvoice-background" class="partsinvoice-background1" style="float: right; text-align: center; display: none">
                        <div class="div-in-background">
                            <div id="NoInvoice"></div>
                            <div id="TotalPartsAmount"></div>
                            <div id="TotalPartsAndServicesAmount"></div>
                        </div>
                    </div>
                </div>


                <div>
                    @(Html.Kendo().Grid(Model.SalesInvoiceDetails)
                        .Name("kendoGridDetails")
                        .Columns(columns =>
                        {
                            columns.Template(t => { }).Title("&nbsp;").ClientTemplate("#= RowNumber(data) #").Width(35);


                            columns.Bound(p => p.SalesInvoiceDetailID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= SalesInvoiceDetailID #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].SalesInvoiceDetailID' value='#= SalesInvoiceDetailID #' />");
                            columns.Bound(p => p.SalesInvoiceID).DisplayNameTitle().Filterable(false).Hidden()
                               .ClientTemplate("#= SalesInvoiceID #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].SalesInvoiceID' value='#= SalesInvoiceID #' />");


                            columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                            columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(100).HtmlAttributes(new { style = "" }).Hidden()
                                .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                            columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(200)
                                .ClientFooterTemplate("Total:")
                                .ClientTemplate("#= CommodityName #" +
                                        "<div class = 'multiline-grid'> #= CommodityCode #</div>" +
                                        "<div class = 'isWarrantyClaim'> #= (IsWarrantyClaim == true) ? '[Khiếu nại bảo hành]' : '' #</div>" +
                                        "<div class = 'isBonus'> #= (IsWarrantyClaim == false && IsBonus == true) ? '[Quà tặng]' : '' #</div>" +
                                        "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                            columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                            columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Quantity) #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].Quantity' value='#= Quantity #' />");
                            columns.Bound(p => p.ListedPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', ListedPrice) #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].ListedPrice' value='#= ListedPrice #' />");

                            columns.Bound(p => p.DiscountPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                               .Format("{0:n1}%")
                               .ClientFooterTemplate("#= kendo.format('{0:n1}%', average) #")
                               .ClientTemplate("#= kendo.format('{0:n1}%', DiscountPercent) #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].DiscountPercent' value='#= DiscountPercent #' />");

                            columns.Bound(p => p.UnitPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                               .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");

                            columns.Bound(p => p.Amount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].Amount' value='#= Amount #' />");

                            columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" +
                                        "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");
                            columns.Bound(p => p.VATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");

                            columns.Bound(p => p.GrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");

                            columns.Bound(p => p.GrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");

                            columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                            columns.Bound(p => p.IsBonus).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (IsBonus == null)? '' : IsBonus #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].IsBonus' value='#= (IsBonus == null) ? '' : IsBonus #' />");
                            columns.Bound(p => p.IsWarrantyClaim).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (IsWarrantyClaim == null)? '' : IsWarrantyClaim #" + "<input type='hidden' name='SalesInvoiceDetails[#= index(data) #].IsWarrantyClaim' value='#= (IsWarrantyClaim == null) ? '' : IsWarrantyClaim #' />");

                            columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50);
                        })
                        .Filterable()
                        .Navigatable()
                        .ToolBar(toolbar =>
                        {
                            if (Model.Editable)
                            {
                                toolbar.Create();
                                if (Model.QuotationID != null)
                                    toolbar.Custom().Text("Add From Quotation").Url("#").HtmlAttributes(new { onclick = "GetQuotationDetails()" });

                            }
                            else
                            {//Add a functionless button for display purpose only
                                toolbar.Template(
                                    @<text>
                                        <div>
                                            @(Html.Kendo().Button()
                                                .Name("iconButton")
                                                .HtmlAttributes(new { type = "button" })
                                                .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                            )
                                        </div>
                                    </text>);
                            }
                        })

                        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                        .Selectable(settings =>
                        {
                            settings.Mode(GridSelectionMode.Multiple);
                            settings.Type(GridSelectionType.Row);
                        })
                        .Events(events =>
                        {
                            events.DataBinding(@<text> function(e) {rowNumber = 0;} </text>);
                        @*events.DataBound(@<text>
                                function(e) {
                                    var grid = $("#kendoGridDetails").data("kendoGrid");
                                    var data = grid.dataSource.data();
                                    $.each(data, function (i, row) {
                                        var isWarrantyClaim = row.IsWarrantyClaim;
                                        if (isWarrantyClaim == true) {
                                            $('tr[data-uid="' + row.uid + '"]').css("color", "darkred");
                                        }
                                    });
                                }
                            </text>);*@
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(x => x.SalesInvoiceDetailID);
                                model.Field(m => m.SalesInvoiceDetailID).DefaultValue(0);
                                model.Field(m => m.SalesInvoiceID).DefaultValue(@Model.SalesInvoiceID);
                            })
                            .Events(events =>
                            {
                                events.Error("kendGrid_ErrorHandler");
                            })
                            .Aggregates(a => a.Add(x => x.Quantity).Sum())
                            .Aggregates(a => a.Add(x => x.DiscountPercent).Average())
                            .Aggregates(a => a.Add(x => x.Amount).Sum())
                            .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                            .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                        )
                    )

                    
                    
                    <div class="panel-div">
                        @(Html.Kendo().PanelBar()
                            .Name("OperatorCheckedPanelBar")
                            .Items(items =>
                            {
                                items.Add()
                                    .Text("Kiểm tra phụ tùng tại quầy tiếp nhận")
                                    .Selected(true)
                                    .Expanded(false)
                                    .Content(@<text>
                                        <div class="div-panel-left">
                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedBrakeFluid, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedBrakeFluid).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedBrakeFluid, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>


                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedFrontBrake, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedFrontBrake).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedFrontBrake, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedRearBrake, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedRearBrake).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedRearBrake, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedLights, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedLights).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedLights, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedSwitch, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedSwitch).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedSwitch, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedHorn, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedHorn).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedHorn, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                            
                                        <div class="div-panel-right">

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedFrontWheel, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedFrontWheel).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedFrontWheel, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedRearWheel, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedRearWheel).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedRearWheel, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedEngineOil, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedEngineOil).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedEngineOil, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedCoolant, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedCoolant).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedCoolant, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedChain, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedChain).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedChain, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedSpeedoMeter, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedSpeedoMeter).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedSpeedoMeter, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                    </text>).HtmlAttributes(new { @class = "panel-class" });
                            })
                        )
                    </div>


                    <div style="clear: both;"></div>

                    <div class="panel-div">
                        @(Html.Kendo().PanelBar()
                            .Name("TechnicalCheckedPanelBar")
                            .Items(items =>
                            {
                                items.Add()
                                    .Text("Kiểm tra phụ tùng tại xưởng dịch vụ")
                                    .Selected(true)
                                    .Expanded(false)
                                    .Content(@<text>
                                        <div class="div-panel-left">
                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedBrakeCord, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedBrakeCord).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedBrakeCord, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedGearOil, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedGearOil).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedGearOil, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedCuroa, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedCuroa).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedCuroa, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedBattery, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedBattery).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedBattery, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedAirFilter, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedAirFilter).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedAirFilter, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        
                                        <div class="div-panel-right">

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedGearChain, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedGearChain).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedGearChain, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedClutch, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedClutch).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedClutch, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedCarbonBrushes, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedCarbonBrushes).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedCarbonBrushes, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedThrottle, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedThrottle).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedThrottle, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div class="div-row">
                                                <div class="form-group1">
                                                    @Html.LabelFor(model => model.CheckedSparkPlug, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().DropDownListFor(m => m.CheckedSparkPlug).BindTo(Model.CheckedListDropDown).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.CheckedSparkPlug, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                    </text>).HtmlAttributes(new { @class = "panel-class" });
                            })
                        )
                    </div>

                    <div style="clear: both;"></div>
                    @Html.Partial("~/Views/SalesInvoices/_SalesInvoiceSectionB.cshtml")




                    <div class="panel-div" style="margin-left: 1px;">
                        @*margin-left: 1px; this to make the left of its items the same with item inside PanelBar which border = 1px*@
                        <div class="div-row">
                            @Html.LabelFor(model => model.Damages, htmlAttributes: new { @class = "control-label1" })
                            <div class="div-input">
                                @Html.Kendo().MaskedTextBoxFor(model => model.Damages).HtmlAttributes(new { @class = "input-class2" })
                                @Html.ValidationMessageFor(model => model.Damages, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="div-row">
                            @Html.LabelFor(model => model.Causes, htmlAttributes: new { @class = "control-label1" })
                            <div class="div-input">
                                @Html.Kendo().MaskedTextBoxFor(model => model.Causes).HtmlAttributes(new { @class = "input-class2" })
                                @Html.ValidationMessageFor(model => model.Causes, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="div-row">
                            @Html.LabelFor(model => model.Solutions, htmlAttributes: new { @class = "control-label1" })
                            <div class="div-input">
                                @Html.Kendo().MaskedTextBoxFor(model => model.Solutions).HtmlAttributes(new { @class = "input-class2" })
                                @Html.ValidationMessageFor(model => model.Solutions, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="div-row">
                            @Html.LabelFor(model => model.NextMaintenance, htmlAttributes: new { @class = "control-label1" })
                            <div class="div-input">
                                @Html.Kendo().MaskedTextBoxFor(model => model.NextMaintenance).HtmlAttributes(new { @class = "input-class2" })
                                @Html.ValidationMessageFor(model => model.NextMaintenance, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="div-row">
                            @Html.LabelFor(model => model.NextMaintenanceDate, htmlAttributes: new { @class = "control-label1" })
                            <div class="div-input">
                                @Html.Kendo().DatePickerFor(model => model.NextMaintenanceDate).HtmlAttributes(new { @class = "input-class2" })
                                @Html.ValidationMessageFor(model => model.NextMaintenanceDate, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="div-row">
                            @Html.LabelFor(model => model.NextMaintenanceMeters, htmlAttributes: new { @class = "control-label1" })
                            <div class="div-input">
                                @Html.Kendo().NumericTextBoxFor(model => model.NextMaintenanceMeters).Format("{0:n0}").Decimals(0).HtmlAttributes(new { @class = "input-class2" })
                                @Html.ValidationMessageFor(model => model.NextMaintenanceMeters, "", new { @class = "text-danger" })
                            </div>
                        </div>



                    </div>
                </div>
            </div>


            <div class="div-button">
                @if (Model.Editable)
                {
                    <button id="submitButton" type="submit" onclick="$('#IsFinished').val(false);" formaction="@Url.Action("Edit", "ServicesInvoices")" class="k-button custom-button"> <img src="~/Content/Images/New/save-icon.png" alt="Lưu phiếu" /> Save </button>
                    <button id="closedSubmitButton_NMVN" type="submit" onclick="$('#IsFinished').val(false);" formaction="@Url.Action("Edit", "ServicesInvoices")" class="k-button custom-button"> <img src="~/Content/Images/New/Apps-printer-icon.png" alt="SavePreview" /> In phiếu sửa chữa </button>
                    <button id="closedSubmitButton" type="submit" onclick="$('#IsFinished').val(true);" formaction="@Url.Action("Edit", "ServicesInvoices")" class="k-button custom-button"> <img src="~/Content/Images/New/payment-icon.png" alt="SaveFinish" /> Thanh toán </button>

                    <input id="submitCreateWizard" style="display:none" type="submit" formaction="@Url.Action("Edit", "ServicesInvoices")" class="k-button custom-button cancel" />

                    <input id="submitEditServiceContract" style="display:none" type="submit" formaction="@Url.Action("EditServiceContract", "ServicesInvoices")" class="k-button custom-button" />
                }
                else
                {
                    <button formaction="@Url.Action("Print", "ServicesInvoices", new {id = @Model.SalesInvoiceID })" class="k-button custom-button"> <img src="~/Content/Images/New/Apps-printer-icon.png" alt="SavePreview" /> In phiếu sửa chữa </button>
                }
            </div>
            @Html.Partial("~/Views/Helpers/Commons/_ViewHeader.cshtml")
        </div>
    }

</div>

<link href="@Url.Content("~/Content/CustomCss/FourColumn.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>


<script type="text/javascript">

    $(function () {
        (function getRelatedPartsInvoiceValue() {
            $.ajax({
                url: '@Url.Action("GetRelatedPartsInvoiceValue", "ServicesInvoiceApi")',
                data: JSON.stringify({ "serviceInvoiceID": $("#SalesInvoiceID").val() }),
                type: 'POST',
                contentType: 'application/json;',
                dataType: 'json',
                error: function (request, error) {
                    $("#partsInvoice-background").css("display", "none");
                },
                success: function (result) {
                    if (result.NoInvoice > 0) {
                        $("#partsInvoice-background").css("display", "inline-block");
                        $("#NoInvoice").html("# " + kendo.format('{0:n0}', result.NoInvoice));
                        $("#TotalPartsAmount").html(kendo.format('{0:n0}', result.TotalPartsAmount));
                        $("#TotalPartsAndServicesAmount").html(kendo.format('{0:n0}', 1 * $("#TotalGrossAmount").val() + result.TotalPartsAmount));
                    }
                    else {
                        $("#partsInvoice-background").css("display", "none");
                    }
                }
            });

            setTimeout(getRelatedPartsInvoiceValue, 10000); // every 10 sec
        })();
    });


    function GetQuotationDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetQuotationDetails", "ServicesInvoices")", "Chọn dịch vụ", "900px", "413px");
        });
    }
</script>