@using MVCClient.Configuration

@model MVCClient.ViewModels.StockTasks.WarehouseInvoiceViewModel

<div id="div-form">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.WarehouseInvoiceID)
        @Html.HiddenFor(model => model.TotalQuantity)
        @Html.HiddenFor(model => model.TotalAmount)
        @Html.HiddenFor(model => model.TotalVATAmount)
        @Html.HiddenFor(model => model.TotalGrossAmount)
        @Html.HiddenFor(model => model.AverageDiscountPercent)

        @Html.HiddenFor(model => model.SubmitTypeOption)

        <div id="popupWindow"></div>

        <div class="div-main">

            <div class="div-left">
                <div class="form-group1">
                    @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.EntryDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.Reference).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.VATInvoiceNo, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.VATInvoiceNo).HtmlAttributes(new { @class = "input-class" })
                        @*@Html.ValidationMessageFor(model => model.VATInvoiceNo, "", new { @class = "text-danger" })*@
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.VATInvoiceDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DatePickerFor(model => model.VATInvoiceDate).HtmlAttributes(new { @class = "input-class" })
                        @*@Html.ValidationMessageFor(model => model.VATInvoiceDate, "", new { @class = "text-danger" })*@
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.VATInvoiceSeries, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.VATInvoiceSeries).HtmlAttributes(new { @class = "input-class" })
                        @*@Html.ValidationMessageFor(model => model.VATInvoiceSeries, "", new { @class = "text-danger" })*@
                    </div>
                </div>

            </div>

            <div class="div-right">
                <div class="contract-separator">
                    <div id="warehouse-div" class="warehouse-background">
                        @Html.Partial("~/Views/Helpers/Commons/_WarehouseMaskedTextBox.cshtml")

                        <div class="div-row3 warehouse-lmargin" style="padding-top: 34px;">
                            <div class="div-row3">
                                <div class="div-input" style="margin-left: 0px;">
                                    @Html.HiddenFor(model => model.SourceWarehouseID)
                                    @Html.Kendo().MaskedTextBoxFor(model => model.SourceWarehouseName).HtmlAttributes(new { @class = "input-class1", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <div>
                    @(Html.Kendo().Grid(Model.WarehouseInvoiceViewDetails)
                        .Name("kendoGridDetails")
                        .Columns(columns =>
                        {
                            columns.Template(t => { }).Title("&nbsp;").ClientTemplate("#= RowNumber(data) #").Width(35);


                            columns.Bound(p => p.WarehouseInvoiceDetailID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= WarehouseInvoiceDetailID #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].WarehouseInvoiceDetailID' value='#= WarehouseInvoiceDetailID #' />");
                            columns.Bound(p => p.WarehouseInvoiceID).DisplayNameTitle().Filterable(false).Hidden()
                               .ClientTemplate("#= WarehouseInvoiceID #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].WarehouseInvoiceID' value='#= WarehouseInvoiceID #' />");


                            columns.Bound(p => p.StockTransferDetailID).DisplayNameTitle().Filterable(false).Hidden()
                               .ClientTemplate("#= StockTransferDetailID #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].StockTransferDetailID' value='#= StockTransferDetailID #' />");


                            columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                            columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false)
                                .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                            columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(306)
                                .ClientFooterTemplate("Tổng cộng:")
                                .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");
                                                     
                            columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


                            columns.Bound(p => p.ChassisCode).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= ChassisCode #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].ChassisCode' value='#= ChassisCode #' />");
                            columns.Bound(p => p.EngineCode).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= EngineCode #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].EngineCode' value='#= EngineCode #' />");
                            columns.Bound(p => p.ColorCode).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= ColorCode #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].ColorCode' value='#= ColorCode #' />");


                            columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).EditorTemplateName("DecimalReadonly").HtmlAttributes(new { @class = "grid-number-column", @readonly = "readonly" }).Width(50)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Quantity) #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");
                            columns.Bound(p => p.ListedPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90).Hidden()
                               .Format("{0:n0}")
                               .ClientTemplate("#= kendo.format('{0:n0}', ListedPrice) #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].ListedPrice' value='#= ListedPrice #' />");

                            columns.Bound(p => p.DiscountPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                               .Format("{0:n1}%")
                               .ClientFooterTemplate("#= kendo.format('{0:n1}%', average) #")
                               .ClientTemplate("#= kendo.format('{0:n1}%', DiscountPercent) #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].DiscountPercent' value='#= DiscountPercent #' />");

                            columns.Bound(p => p.UnitPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                               .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");

                            columns.Bound(p => p.Amount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].Amount' value='#= Amount #' />");

                            columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" +
                                    "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");
                            columns.Bound(p => p.VATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");

                            columns.Bound(p => p.GrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90).Hidden()
                               .Format("{0:n0}")
                               .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");

                            columns.Bound(p => p.GrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");

                            columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='WarehouseInvoiceViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                            columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50);
                        })
                        .Filterable()
                        .Navigatable()
                        .ToolBar(toolbar =>
                        {
                            if (Model.Editable)
                            {
                                toolbar.Custom().Text("Chọn phiếu bán hàng").Url("#").HtmlAttributes(new { onclick = "GetPendingStockTransferDetails()" });
                            }
                            else
                            {//Add a functionless button for display purpose only
                                toolbar.Template(
                                    @<text>
                                        <div>
                                            @(Html.Kendo().Button()
                                                .Name("iconButton")
                                                .HtmlAttributes(new { type = "button" })
                                                .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                            )
                                        </div>
                                    </text>);
                            }
                        })


                        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                        .Selectable(settings =>
                        {
                            settings.Mode(GridSelectionMode.Multiple);
                            settings.Type(GridSelectionType.Row);
                        })
                        .Events(events =>
                        {
                            events.DataBinding(@<text> function(e) {rowNumber = 0;} </text>);
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(x => x.WarehouseInvoiceDetailID);
                                model.Field(m => m.WarehouseInvoiceDetailID).DefaultValue(0);
                                model.Field(m => m.WarehouseInvoiceID).DefaultValue(@Model.WarehouseInvoiceID);
                                model.Field(m => m.Quantity).DefaultValue(0);
                                model.Field(m => m.DiscountPercent).DefaultValue(0);
                            })
                            .Events(events =>
                            {
                                events.Error("kendGrid_ErrorHandler");
                            })
                            .Aggregates(a => a.Add(x => x.Quantity).Sum())
                            .Aggregates(a => a.Add(x => x.DiscountPercent).Average())
                            .Aggregates(a => a.Add(x => x.Amount).Sum())
                            .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                            .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                        )
                    )




                    <div class="panel-div">
                        @(Html.Kendo().PanelBar()
                            .Name("IntroPanelBar")
                            .Items(items =>
                            {
                                items.Add()
                                    .Text("Thông tin khác")
                                    .Selected(true)
                                    .Expanded(false)
                                    .Content(@<text>
                                        <div class="div-panel-left">
                                            <div class="div-row">
                                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label1" })
                                                <div class="div-input">
                                                    @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "input-class1" })
                                                </div>
                                                <div class="div-validation-message">
                                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            @*<div class="div-row">
                                                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label1" })
                                                    <div class="div-input">
                                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "input-class1" })
                                                    </div>
                                                    <div class="div-validation-message">
                                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>*@
                                            @*@Html.Partial("~/Views/Helpers/Commons/_PaymentTermDropDown.cshtml")*@
                                        </div>
                                        <div class="div-panel-right">
                                            @Html.Partial("~/Views/Helpers/Commons/_PreparedPersonDropDown.cshtml")
                                            @Html.Partial("~/Views/Helpers/Commons/_ApproverDropDown.cshtml")
                                        </div>

                                    </text>).HtmlAttributes(new { @class = "panel-class" });
                            })
                        )

                    </div>


                </div>

            </div>

            <div class="div-button">
                @if (Model.Editable)
                {
                    @Html.HiddenFor(model => model.PrintAfterClosedSubmit)
                    <button id="submitButton" type="submit" formaction="@Url.Action("Edit", "WarehouseInvoices")" class="k-button custom-button"> <img src="~/Content/Images/New/save-icon.png" alt="" /> Lưu hóa đơn [Lưu ý: Lưu trước khi in] </button>
                    @*<button id="closedSubmitButton_NMVN" type="submit" onclick="$('#PrintAfterClosedSubmit').val(true);" class="k-button custom-button"> <img src="~/Content/Images/New/Apps-printer-icon.png" alt="SavePreview" /> In hóa đơn</button>*@
                }
                @*else
                {
                    <button formaction="@Url.Action("Print", "WarehouseInvoices", new { id = @Model.WarehouseInvoiceID })" class="k-button custom-button"> <img src="~/Content/Images/New/Apps-printer-icon.png" alt="SavePreview" /> In hóa đơn</button>
                    <button formaction="@Url.Action("PrintDetail", "WarehouseInvoices", new { id = @Model.WarehouseInvoiceID })" class="k-button custom-button"> <img src="~/Content/Images/New/Apps-printer-icon.png" alt="SavePreview" /> In bảng kê</button>
                }*@

                <button type="button" class="k-button custom-button" onclick="window.open('@Url.Action("PrintInvoice", "WarehouseInvoices", new { id = @Model.WarehouseInvoiceID, pgid = 0 })')"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In hóa đơn </button>
                <button type="button" class="k-button custom-button" onclick="window.open('@Url.Action("PrintInvoice", "WarehouseInvoices", new { id = @Model.WarehouseInvoiceID, pgid = 1 })')"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In hóa đơn rút gọn </button>
                <button type="button" class="k-button custom-button" onclick="window.open('@Url.Action("PrintInvoice", "WarehouseInvoices", new { id = @Model.WarehouseInvoiceID, pgid = 2 })')"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In bảng kê xe </button>
                <button type="button" class="k-button custom-button" onclick="window.open('@Url.Action("PrintInvoice", "WarehouseInvoices", new { id = @Model.WarehouseInvoiceID, pgid = 3 })')"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In bảng kê phụ tùng </button>

            </div>
            @Html.Partial("~/Views/Helpers/Commons/_ViewHeader.cshtml")
        </div>
    }

</div>

<link href="@Url.Content("~/Content/CustomCss/FourColumn.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>


<script type="text/javascript">

    function GetPendingStockTransferDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingStockTransferDetails", "WarehouseInvoices")", "Chọn phiếu bán hàng", "@SettingsManager.PopupWidth", "@SettingsManager.PopupHeight");
        });
    }

</script>

<style type="text/css">
    .k-event {
        min-height: 48px;
        height: 48px;
    }
</style>
